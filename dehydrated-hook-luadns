#!/usr/bin/env bash
###############################
# DEHYDRATED HOOK SCRIPT FOR LUADNS.COM
###############################
# Copyright (C) Mark Finnan (2025)
###############################
# Script Dependencies are: awk, dig, grep, jq, curl
#

# Version Number
version="0.8.2"

###############################
# VARIABLES
###############################
lua_api_url="https://api.luadns.com/v1" 
prefix="_acme-challenge."
luadns_nameservers=( "ns1.luadns.net" "ns2.luadns.net" \
                     "ns3.luadns.net" "ns4.luadns.net" )

###############################
# FUNCTIONS
###############################
# Log functions
function log1() {
  echo " + Hook:" "$@"
}

function log2() {
  echo " + Hook: -->" "$@"
}

function log3() {
  echo " + Hook: ---->" "$@"
}

# Query an Auth Nameserver for the Zone NS Records
function query_zone_ns_records() {
  local auth_nameserver="${1}"
  local fqdn="${2}"

  # Call Dig to Get the NS Records
  dig +short @"${auth_nameserver}" NS "${fqdn}"
}

# Query Auth Nameserver for TXT Record Deployed
function query_nameserver() {
  local auth_server="${1}"
  local name="${2}"
  local content="${3}"

  # Call Dig to Query the nameserver for the record. grep is required
  # here as for wildcard certs multiple records with the same name are
  # deployed with different content
  dig +short @"${auth_server}" TXT "${name}" | grep -qw "${content}"
}

# Base Curl Command as per the Luadns.com REST API documentation
function curl_cmd() {
  curl --silent -u ${lua_email}:${lua_api_key} \
  -H 'Accept: application/json' "$@"
}

# Check that the lua_email and lua_api_token variables have been defined
# and passed into the script correctly.
function luadns_credentials_check(){
  if [ -z "${lua_email}" ]
  then
    log1 "ERROR: Luadns Email (lua_email) empty - Exiting"
    exit 1
  elif [ -z "${lua_api_key}" ]
  then
    log1 "ERROR: Luadns API Key (lua_api_key) empty - Exiting"
    exit 1
  fi
}

# Check dependencies are installed. Some of these checks are redundant as
# dehydrated itself requires the same dependencies but for best practice
# they're included here also.
function check_dependencies() {

  # Dependencies are awk, curl, dig, jq and grep
  # Check for Curl
  if [ -z $(which curl) ]
  then
    log1 "ERROR: curl is not installed - Exiting"
    exit 1
  
  # Check for dig
  elif [ -z $(which dig) ]
  then
    log1 "ERROR: dig is not installed - Exiting"
    exit 1

  # Check for grep
  elif [ -z $(which grep) ]
  then
    log1 "ERROR: grep is not installed - Exiting"
    exit 1

  # Check for awk
  elif [ -z $(which awk) ]
  then
    log1 "ERROR: awk is not installed - Exiting"
    exit 1

  # Check for sed
  elif [ -z $(which sed) ]
  then
    log1 "ERROR: sed is not installed - Exiting"
    exit 1

  # Check for jq
  elif [ -z $(which jq) ]
  then
    log1 "ERROR: jq is not installed - Exiting"
    exit 1
  fi 
}

# If given a domain name (fqdn), in the following syntax - my.example.tld
# Break the fqdn apart to isolate the zone name (example.tld)
function get_zone_name_from_fqdn() {
  local fqdn="${1}"

  # Exit if the fqdn is empty or does not have at least 1 dot.
  if [ -z "${fqdn}" ] || [ -z $( echo "${fqdn}" | awk -F "." '{print $2}') ] 
  then
    log1 "ERROR (Invalid fqdn supplied)"
    exit 1
  fi
 
  # Remove trailing dot if present. For getting the Zone ID the dot
  # is undesired, but for record IDs it is needed.
  if [ "${fqdn:0-1}" == "." ]
  then 
    fqdn="${fqdn::i-1}"
  fi
 
  # Pick Everything after the 2nd last "." to get the root-domain
  zone_name=$( echo "${fqdn}" | awk -F "." '{ printf $(NF-1)"."$NF}')
}

# Get NS Records for Zone (Root of the domain passed in)
function get_zone_nameservers() { 

  # Try each of the Luadns Nameservers until valid NS Records
  # are obtained. Serves as a way of validating the domain
  # before contacting the Luadns Rest API

  # Zone Name
  local zone="${1}"

  # Number of starting nameservers
  local N_luadns_nameservers=${#luadns_nameservers[@]}

  log1 "Querying Luadns Nameservers for" "${zone}" "NS Records..."

  # Loop through each of the nameservers defined at the start of the script
  # and query each one of them for NS records for the Zone name. Stop when
  # valid NS records are found
  for i in $(seq 0 1 $((N_luadns_nameservers-1)))
  do
    log2 "Querying Nameserver" $((i+1))"/"$N_luadns_nameservers":" "${luadns_nameservers[$i]}"

    # Call above function to use dig to get NS records
    if ! zone_ns_records=$(query_zone_ns_records "${luadns_nameservers[$i]}" "${zone}")
    then
      log3 "No NS records obtained from" "${luadns_nameservers[$i]}" "- Trying Next Nameserver..."

    else
      # Got a Valid Reply - Get number of nameservers obtained
      N_zone_ns_records=$( echo "${zone_ns_records}" | wc -l)

      # Print Success and break
      log3 "Success: Obtained" $N_zone_ns_records "NS records for" "${zone}"
      break
    fi

    # Otherwise check if all initial nameservers have been tried
    if [ $i == $((N_luadns_nameservers-1)) ]
    then
      log3 "ERROR: Could not find NS records for" "${zone}" "from any Luadns Nameserver"
      log3 "       Is the domain correct and using Luadns Nameservers?"
      exit 1
    fi
  done
}

###############################
# LUADNS API FUNCTIONS
###############################
# Official Documentation is here:
# https://www.luadns.com/api.html

function check_response_was_valid() {
  # Easiest thing to do is check the length of the string obtained is
  # greater than some number. Using 100 as a number for now...
  local response="${1}"

  # Check Response is valid by looking at length of the string, long
  # term - might re-try the api call instead...
  if [ ${#response} -lt 100 ]
  then
    log2 "ERROR: Invalid Response received from server - Exiting."
    exit 1
  fi 
}

# Get the Zone ID for the above Domain Name
function luadns_get_zone_id() {

  # Local Variable for Zone Name
  local luadns_zone_name="${1}"

  # Sanity Check that the zone_name given is not empty. This is
  # probably redundant, but decided to add anyway
  if [ -z "${luadns_zone_name}" ]
  then
    log2 "ERROR: (Zone Name is empty)"
    exit 1
  fi

  # Get the Zone ID for the Domain Above using the API
  local response=$( curl_cmd "${lua_api_url}"/zones ) 

  # Check Response was valid
  check_response_was_valid "${response}"

  # Parse Response with jq command. jq syntax - Traverse
  # down a level, then select the block that has the "name" parameter
  # set to our domain, then select the "id" within that block
  zone_id=$(echo "${response}" | jq ".[] | select(.name==\"${luadns_zone_name}\") | .id") 

  # Check if we got a Zone ID parameter as expected
  if [ -z "${zone_id}" ]
  then
    log2 "ERROR: Zone ID could not be obtained"
    exit 1
  fi
}

# Create a new record using the Luadns.com API
function luadns_create_new_record() {

  # Some Local Variables
  local luadns_zone_id="${1}"
  local luadns_record="${2}"
  local luadns_record_type="${3}"
  local luadns_record_content="${4}"

  # Check for Trailing dot, if it's not there add it. This is
  # required to create a new record successfully
  if [ "${luadns_record:0-1}" != "." ]
  then
    # Add a trailing dot to the record name if its last
    # character is not already a dot.
    luadns_record="${luadns_record}""."
  fi

  # Create New Record as per official API Documentation
  local response=$(curl_cmd -X POST \
    -d "{ \":zone_id\":${luadns_zone_id}, \"name\":\"${luadns_record}\", \"type\":\"${luadns_record_type}\", \"content\":\"${luadns_record_content}\"}" \
    "${lua_api_url}"/zones/$zone_id/records)

  # Check Response was valid
  check_response_was_valid "${response}"

  # Check the record was deployed successfully
  # There should be a "created_at" parameter we can look for in the json data received
  # A long term goal here could be to check the date and compare it with todays date,
  # for the moment it is checked that it exists only.
  local success_check=$(echo "${response}" | jq ".created_at")

  # Check the success check isn't empty
  if [ -n "${success_check}" ]
  then
    log2 "Record successfully deployed."
  else
    log2 "ERROR: Problem deploying record"
    exit 1
  fi
}

# Get the Record ID for a given record using the Luadns.com API
function luadns_get_record_id() {

  # Initialize input arguments
  local luadns_zone_id="${1}"
  local luadns_record_name="${2}"
  local luadns_record_content="${3}"

  # Check for Trailing dot, if it's not there add it. This seems to be
  # required to locate the record id correctly
  if [ "${luadns_record_name:0-1}" != "." ]
  then
    # Add a trailing dot to the record name if required
    luadns_record_name="${luadns_record_name}""."
  fi

  # Get the record id for the above record using the API.
  local response=$(curl_cmd "${lua_api_url}"/zones/${luadns_zone_id})

  # Check Response was valid
  check_response_was_valid "${response}"

  # Process the json data received to pull out the record ID of type TXT that has
  # the name AND the content value we want to delete. It's not enough to just
  # go by name as for wildcard certs, two records with the same name and different
  # content are deployed.

  # Note that the below will return multiple record ID numbers
  # if by some weird chance there are multiple records with the same name, type AND
  # content
  record_id=$(echo "${response}" | jq ".records | .[] | select(.name==\"${luadns_record_name}\" and .type==\"TXT\" and .content==\"${luadns_record_content}\") | .id")

  # Check the Obtained Record ID is not Empty
  if [ -z "${record_id}" ]
  then
    log2 "ERROR: Record ID could not be obtained"
    exit 1
  fi
}

# Delete a record using the LuaDNS API
function luadns_delete_record() {

  local luadns_zone_id="${1}"
  local luadns_record_id="${2}"
  local k=0

  # Do a check for multiple record IDs, this can happen if there are multiple
  # records with the same name, type and content. This is probably impossible
  # to happen with dehydrated, but with calling the script directly, it's possible
  # to have this happen if the challenge isn't cleaned by accident after its deployed.
  local N_luadns_record_id=$( echo "${luadns_record_id}" | wc -l)

  if [ $N_luadns_record_id != 1 ]
  then
    log2 "Found" $N_luadns_record_id "Record IDs?? - Will delete all of them"
  fi

  # Loop through all record IDs
  for k in $(seq 1 1 $N_luadns_record_id)
  do
    local luadns_record_id_2=$(echo "${luadns_record_id}" | sed -n "$k"p)

    # Use the zone_id and the record_id to delete the record as per
    # the API Documentation
    local response=$(curl_cmd -X DELETE "${lua_api_url}"/zones/${luadns_zone_id}/records/${luadns_record_id_2})
  
    # Check Response was valid
    check_response_was_valid "${response}"
  
    # Need to check the response for success. Decided to check if we get
    # the same record id back from the api server that we sent it to test
    # if the record has been successfully deleted
    local success_check=$(echo "${response}" | jq ".id")
  
    # Check for success - Was the same record id returned after the deletion?
    if [ "${success_check}" == "${luadns_record_id_2}" ]
    then
      log2 "Record:" "${luadns_record_id_2}" "Successfully Deleted"
    else
      log2 "ERROR: Problem Deleting Record" "${luadns_record_id_2}"
      exit 1
    fi
  done
}

# Wait for the record to be live on all of the Nameservers obtained
# from the luadns nameservers
function wait_for_record_to_propagate() {

  # Wait for publication by querying the authoratitve nameserver
  local delay_time=2
  local retries=5
  local luadns_record_name="${1}" 
  local luadns_record_content="${2}"
  local i=1
  local j=1

  log1 "Querying all" $N_zone_ns_records "${zone_name}" "Nameservers for Record..."

  # Loop through each of the Zone NS Records to Query each of them for
  # the record deployed above up to a maximum of $retries
  for j in $(seq 1 1 $N_zone_ns_records)
  do

    # Get Nameserver to query
    local nameserver=$(echo "${zone_ns_records}" | sed -n "$j"p)
    log2 "Nameserver" $j"/"$N_zone_ns_records":" "${nameserver}" 
  
    # Try up to a maximum of $retries..
    for i in $(seq 1 1 $retries)
    do
  
      # Wait delay_time^i seconds so the wait time doubles each try...
      wait_time=$(($delay_time**$i))
      log3 "Waiting" $wait_time "seconds"
      sleep $wait_time
    
      # Check to see if the record has been deployed or not
      log3 "Querying for record - Try:" $i"/"$retries
  
      if query_nameserver "${nameserver}" "${luadns_record_name}" "${luadns_record_content}"
      then
        log3 "Record live"
        break
      elif [ $i == $retries ]
      then
        log3 "ERROR: Record not live after" $retries "tries - Exiting"
        exit 1
      else
        log3 "Record not yet live - Retrying..."
        i=$((i+1))
      fi
    done 
  done

  # Print Success
  log2 "Record successfully deployed and live"
}

###############################
# MAIN SCRIPT FUNCTIONS
###############################

# Deploy Single Challenge Function
function deploy_single_challenge() {

  # Dehydrated Documentation - $1 = Domain, $2 = TXT Record Value
  local domain="${1}" token_filename="${2}" token_value="${3}"

  # Append the "_acme-challenge." to the domain
  local record_name="${prefix}"$domain
  log1 "Name:${record_name}, Type:TXT, Value:${token_value}"
 
  # Extract the Root Domain to allow getting the Zone ID
  get_zone_name_from_fqdn $domain
  log1 "Zone Name -" "${zone_name}"

  # Now Query the Luadns nameservers for the actual NS records
  # of the Zone Name (Root Domain of Record passed from dehydrated)
  get_zone_nameservers "${zone_name}"
 
  log1 "Deploying record via" "${lua_api_url}""..."

  # Get Zone ID From LuaDNS API...
  log2 "Getting Zone ID..."
  luadns_get_zone_id ${zone_name}
  log2 "Zone ID -" $zone_id

  # Create Record using LuaDNS API (Type TXT) & Wait for Publication
  luadns_create_new_record "${zone_id}" "${record_name}" "TXT" "${token_value}"

  # Wait for the record to be live on the auth nameserver
  wait_for_record_to_propagate "${record_name}" "${token_value}"
}

# Clean Single Challenge Function
function clean_single_challenge() {
 
  # Dehydrated Documentation - $1 = Domain, $2 = TXT Record Value
  local domain="${1}" token_filename="${2}" token_value="${3}"

  # Append the "_acme-challenge." to the domain 
  local record_name="${prefix}"$domain
  log1 "Name:${record_name}, Type:TXT, Value:${token_value}"  

  # Extract the Root Domain to allow getting the Zone ID
  get_zone_name_from_fqdn $domain
  log1 "Zone Name -" "${zone_name}"

  log1 "Deleting record via" "${lua_api_url}""..."

  # Get the Zone ID From LuaDNS API...
  log2 "Getting Zone ID..."
  luadns_get_zone_id ${zone_name}
  log2 "Zone ID -" $zone_id

  # Now use the zone id to get the record id
  log2 "Getting Record ID..."
  luadns_get_record_id ${zone_id} ${record_name} "${token_value}"

  # Just Print the 1st Record ID found in the weird chance that there
  # are multiple records with the same name, type and content present
  log2 "Record ID -" $(echo "${record_id}" | sed -n 1p)

  # Now use the Zone ID & Record ID to delete the record
  luadns_delete_record "${zone_id}" "${record_id}" 
}

# Main Deploy Challenge Function
function deploy_challenge() {

  # Check necessary dependencies are installed
  check_dependencies

  # Check for LuaDNS Credentials (lua_email & lua_api_key)
  luadns_credentials_check

  # Compute Number of Arguments Passed In
  local args_number=$#

  # Check that it is divisible by 3 - if not exit with an error
  local args_number_check=$(( args_number % 3))
  if [ $args_number_check != 0 ]
  then
    log1 "ERROR: Invalid number of arguments specified - It should be a"
    log1 "       multiple of 3 - Exiting"
    exit 1
  fi

  # Now Determine the Number of Challenges to Deploy
  local challenges_number=$(( args_number / 3 ))

  # Now Loop Through the Input Parameters and call the
  # deploy_challenge_single function for each group of 3 of them
  index_d=1
  while (( ${#} ))
  do
    log1 "############################"
    log1 "+ deploy_challenge:" $index_d "of" $challenges_number
    log1 "############################"
    deploy_single_challenge "${1}" "${2}" "${3}"
    shift 3
    index_d=$((index_d+1))
  done

  log1 "############################"
  log1 "+ SUCCESS: All Challenges successfully deployed and now live"
  log1 "############################"

  # Exit with Success
  exit 0
}

# Main Clean Challenge Function
function clean_challenge() {

  # Check dependencies
  check_dependencies

  # Check for LuaDNS Credentials (lua_email & lua_api_key)
  luadns_credentials_check

  # Compute Number of Arguments Passed In
  local args_number=$#

  # Check that it is divisible by 3 - if not exit with an error
  local args_number_check=$(( args_number % 3))
  if [ $args_number_check != 0 ]
  then
    log1 "ERROR: Invalid number of arguments specified - It should be a"
    log1 "       multiple of 3 - Exiting"
    exit 1
  fi

  # Now Determine the Number of Challenges to Clean
  local challenges_number=$(( args_number / 3 ))

  # Now Loop Through the Input Parameters and call the
  # clean_challenge_single function for each group of 3 of them
  index_c=1
  while (( ${#} ))
  do
    log1 "############################"
    log1 "+ clean_challenge:" $index_c "of" $challenges_number
    log1 "############################"
    clean_single_challenge "${1}" "${2}" "${3}"
    shift 3
    index_c=$((index_c+1))
  done

  log1 "############################"
  log1 "+ SUCCESS: All Challenges cleaned"
  log1 "############################"

  # Exit with Success
  exit 0
}

# Main Deploy Cert Function
function deploy_cert() {

  # Reload nginx if the following is included in the dehydrated config
  # export automatic_nginx_reload="yes"
  if [ ! -z "${automatic_nginx_reload}" ]
  then
    if [ "${automatic_nginx_reload}" == "yes" ]
    then
      
      log1 "Reloading nginx..."
      # Reload nginx via systemctl but prevent the script throwing
      # errors if the reload is not successful such to not interfere
      # with the normal operation
      systemctl reload nginx || log2 "Problem reloading nginx..."

      # Exit with success
      exit 0
    fi
  fi
}

###############################
# SCRIPT START
###############################
# dehydrated documentation:
# https://github.com/dehydrated-io/dehydrated/blob/master/docs/dns-verification.md
#
# Valid Arguments for the Script are "deploy_challenge", "clean_challenge" and
# "deploy_cert" only.
#
# For deploy_challenge, script is called with:
# ./hook.sh deploy_challenge ${fqdn} ${challenge-token} ${txt_token} 
# Where: 
# $1 - operation name
# $2 - fqdn is the domain name given
# $3 - challenge-token is a file for the http-01 challenge (not used here)
# $4 - txt_token
###############################

HANDLER="$1"; shift
if [[ "${HANDLER}" =~ ^(deploy_challenge|clean_challenge|deploy_cert)$ ]]
then
  # If a supported argument is passed in act on it
  "$HANDLER" "$@"

else
  # Otherwise Exit Cleanly for all other arguments
  exit 0
fi

